import SwiftUI

@main
struct DaysOfMumApp_v2: App {
    
    // Force clean app state
    let buildVersion = "2.0"
    @Environment(\.scenePhase) var scenePhase
    @State private var isLoading = true
    
    init() {
        setupTabBarAppearance()
        NotificationManager.shared.requestPermission()
        
        // Check notification status after a short delay
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            NotificationManager.shared.checkNotificationStatus()
        }
    }
    
    var body: some Scene {
        WindowGroup {
            if isLoading {
                LaunchScreen()
                    .onAppear {
                        // Load data and then show main view
                        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                            withAnimation {
                                isLoading = false
                            }
                        }
                    }
            } else {
                MainTabView()
                    .environment(\.managedObjectContext, PersistenceController.shared.container.viewContext)
                    .onChange(of: scenePhase) { oldPhase, newPhase in
                    switch newPhase {
                    case .active:
                        // Force reload photos and quotes when app becomes active
                        print("App became active - force reloading photos and quotes")
                        PhotoManager.shared.forceReloadFromDisk()
                        QuoteManager.shared.loadQuotes()
                        QuoteManager.shared.loadTodaysQuote()
                        NotificationCenter.default.post(name: .photosUpdated, object: nil)
                    case .inactive:
                        print("App became inactive")
                    case .background:
                        print("App entered background - saving context")
                        // Force save when going to background
                        let context = PersistenceController.shared.container.viewContext
                        if context.hasChanges {
                            try? context.save()
                        }
                    @unknown default:
                        break
                    }
                    }
            }
        }
    }
    
    private func setupTabBarAppearance() {
        // Clear any existing appearance
        if #available(iOS 15.0, *) {
            UITabBar.appearance().standardAppearance = UITabBarAppearance()
            UITabBar.appearance().scrollEdgeAppearance = UITabBarAppearance()
        }
        
        // Force the old-style appearance settings
        UITabBar.appearance().barTintColor = UIColor(red: 0.99, green: 0.98, blue: 0.96, alpha: 1.0)
        UITabBar.appearance().unselectedItemTintColor = UIColor(red: 0.95, green: 0.92, blue: 0.85, alpha: 1.0)
        UITabBar.appearance().tintColor = UIColor(red: 1.0, green: 0.8, blue: 0.2, alpha: 1.0)
        UITabBar.appearance().isTranslucent = false
        
        // Also try the new API
        let appearance = UITabBarAppearance()
        appearance.configureWithOpaqueBackground()
        appearance.backgroundColor = UIColor(red: 0.99, green: 0.98, blue: 0.96, alpha: 1.0)
        
        // Soft cream color for unselected items - elegant and subtle
        appearance.stackedLayoutAppearance.normal.iconColor = UIColor(red: 0.95, green: 0.92, blue: 0.85, alpha: 1.0)
        appearance.stackedLayoutAppearance.normal.titleTextAttributes = [.foregroundColor: UIColor(red: 0.95, green: 0.92, blue: 0.85, alpha: 1.0)]
        
        // Gold for selected items
        appearance.stackedLayoutAppearance.selected.iconColor = UIColor(red: 1.0, green: 0.8, blue: 0.2, alpha: 1.0)
        appearance.stackedLayoutAppearance.selected.titleTextAttributes = [.foregroundColor: UIColor(red: 1.0, green: 0.8, blue: 0.2, alpha: 1.0)]
        
        if #available(iOS 15.0, *) {
            UITabBar.appearance().standardAppearance = appearance
            UITabBar.appearance().scrollEdgeAppearance = appearance
        }
    }
} 